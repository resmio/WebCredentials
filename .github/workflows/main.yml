
name: CI

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: macos-10.15
    env:
      DEVELOPER_DIR: /Applications/Xcode_12.app/Contents/Developer
      # To create a fresh cache if none of the cache parameters has changed,
      # simply bump the CACHE_VERSION variable. This is mainly needed when
      # changes to the caching steps have been made, but might be useful for
      # other debugging purposes as well. Github deletes the oldest unused
      # the volume of caches increases over a certain value
      CACHE_VERSION: 1
      RVM_VERSION: 1.29.9
      BUNDLER_VERSION: 2.1.4

    steps:
    - name: 'Pre-start iOS Simulator'
      run: xcrun simctl boot "iPad Air (3rd generation)"
    
    - name: Create output directories
      run: |
        _BUILD_OUTPUT_DIR=$HOME/build_output
        mkdir $_BUILD_OUTPUT_DIR
        echo "BUILD_OUTPUT_DIR=$_BUILD_OUTPUT_DIR" >> $GITHUB_ENV
        
        _XCODEBUILD_LOG_DIR=$_BUILD_OUTPUT_DIR/xcodebuild_logs
        mkdir $_XCODEBUILD_LOG_DIR
        echo "XCODEBUILD_LOG_DIR=$_XCODEBUILD_LOG_DIR" >> $GITHUB_ENV
    
    - name: 'Checkout code'
      uses: actions/checkout@v2
    
    - name: 'Set RUBY_VERSION'
      run: echo "RUBY_VERSION=$(cat .ruby-version)" >> $GITHUB_ENV
      
    - name: 'Set RUBY_GEMSET'
      run: echo "RUBY_GEMSET=$(cat .ruby-gemset)" >> $GITHUB_ENV
    
    - name: 'Fetch rvm cache'
      id: rvm-cache
      uses: actions/cache@v1
      with:
        # This caches the complete rvm folder, including ruby and gems,
        # so no extra cache step for ruby is necessary.
        # It includes the rvm version and the ruby version.
        #
        # The gems are cached in a specific cache as well, so, if Gemfile.lock
        # has changed, the gemset will be removed and installed from scratch
        # without having to reinstall rvm or ruby.
        # Thus, the hash of Gemfile.lock is not included in the key for
        # this cache
        path: ~/.rvm/
        key: cache-${{ env.CACHE_VERSION }}_rvm-${{ env.RVM_VERSION }}_ruby-${{ env.RUBY_VERSION }}
    
    - name: 'Install rvm'
      if: steps.rvm-cache.outputs.cache-hit != 'true'
      run: 'curl -sSL https://get.rvm.io | bash'
        
    - name: 'Install ruby'
      if: steps.rvm-cache.outputs.cache-hit != 'true'
      run: |
        source $HOME/.rvm/scripts/rvm
        rvm install $(cat .ruby-version)

    - name: 'Fetch bundle cache'
      id: bundle-cache
      uses: actions/cache@v1
      with:
        path: ~/.rvm/gems/ruby-${{ env.RUBY_VERSION }}@${{ env.RUBY_GEMSET }}
        key: cache-${{ env.CACHE_VERSION }}_bundle-${{ hashFiles('Gemfile.lock') }}

    - name: 'Install coreutils'
      if: steps.bundle-cache.outputs.cache-hit != 'true'
      run: |
        # This step currently (April 10, 2020) seems to be necessary
        # so bundle install doesn't error out when trying to build the
        # native extensions for ffi, which is installed as a secondary
        # dependency for one of the gems in the Gemfile (I think cocoapods,
        # but haven't checked that yet.) It used to fail because it couldn't
        # find gmkdir, which is contained in coreutils. This step is not
        # cached yet but takes only ... seconds to install.
        brew install coreutils

    - name: 'Install bundle'
      if: steps.bundle-cache.outputs.cache-hit != 'true'
      run: |
        source $HOME/.rvm/scripts/rvm
        rvm --force gemset empty $RUBY_GEMSET
        rvm use $RUBY_VERSION@$RUBY_GEMSET
        gem install bundler:$BUNDLER_VERSION
        bundle install
    
    - name: 'Fetch pod cache'
      id: pod-cache
      uses: actions/cache@v1
      with:
        path: ./Pods
        key: cache-${{ env.CACHE_VERSION }}_bundle-${{ hashFiles('Podfile.lock') }}
        
    - name: 'Install pods'
      if: steps.pod-cache.outputs.cache-hit != 'true'
      run: |
        source $HOME/.rvm/scripts/rvm
        rvm use .
        pod install

    - name: 'Clean / Build / Test'
      run: |
        xcodebuild \
          -workspace WebCredentials.xcworkspace \
          -scheme "WebCredentials" \
          -destination 'platform=iOS Simulator,name=iPad Air (3rd generation),OS=latest' \
          clean build test \
          | tee "$XCODEBUILD_LOG_DIR/xcodebuild-verbose.log" \
          | xcpretty \
          | tee "$XCODEBUILD_LOG_DIR/xcodebuild-xcpretty.log"

    - name: 'Upload xcodebuild logs'
      uses: actions/upload-artifact@v1
      with:
        name: xcodebuild-logs
        path: ${{ env.XCODEBUILD_LOG_DIR }}



